xlattice_go/msg/TODO

2103-11-16 (from 09-30)
    * drop Hello from p.proto
        - this requires reworking in_q_test.go
        - and out_q_test.go

2013-09-30
    * modify tests to register with XLReg on 44444
    * initial goal is group of K peers which exchange keepalives
        until stopped
    * modify protocol so that each peer has an app which can use
        the msg layer 
        - to send single messages to an app associated with another
            peer
        - to broadcast messages to the apps associated with other
            peers
        - such messages should be opaque possibly except for a
            recipient index (this would be the index of an app)
            * recipient index allows us to have multiple apps
                using the same XLatticeMsg layer

2013-09-16
    * need benchmarks for helloAndReply functions                       * SKIP

2013-09-12
    * modify code so that participating nodes use xlReg on test:44444
        to join
    * HelloMsg in protocol is replaced by helloAndReply

2013-08-30
    * Find and fix: something in in_q_test.go causes the test 	        * DONE
        failure count to go up without any error being reported 	    * DONE
        - test on c.Failed() at end of each test says none have failed	* DONE
        - usually claims 3 failures, sometimes 1 or 2	                * DONE
        - assume this caused by goroutines still running when tests	    * DONE
            end	                                                        * DONE

2013-08-29
    * node/BaseNode has 'name' field, but this is not defined in
        p.proto.
        - should it be?
        - if it is, it should be added to HelloMsg
            * this may cause problems as it is currently not 
                constrained to be unique
                - could require that it be a fully qualified domain name

    * Add Salt and Sig fields to the HelloMsg.                          # DONE
        - Salt is 8 bytes of secure random bits from srng, a            # DONE
            SystemRNG instance

        - Sig is an RSA+SHA1 digital signature over id, commsPubKey,
            sigPubKey, Salt, and MyEnd in that order, where the MyEnd
            is optional
            * XXX actually MyEnd is not included
        - If a Hello has a bad digital signature we send a BadSig
            error message and close the connection.
            * XXX actually returning whatever error rsa.VerifyPKCS1v15
                returns
                - so BadSig is unused
